#!/usr/bin/env ruby
require File.expand_path("../../lib/parse.rb", __FILE__)
require File.expand_path("../../lib/site.rb", __FILE__)
require File.expand_path("../../lib/jaxrsdoc_version.rb", __FILE__)
require 'optparse'
require "rexml/document"

options = {}

usage_examples = <<EX
    # Generate site from the project sources
    $ jaxrsdoc /Users/me/projects/mysources

    # Generate site from the project sources specifying a name and version 
    $ jaxrsdoc -a MyPetProject -r 1.0.2 /Users/me/projects/mysources

    # Generate site from a Maven project
    $ jaxrsdoc -m /Users/me/projects/mysources

    # Generate site for the project with a specific pattern matching of the REST resources
    $ jaxrsdoc -m -p "*ResourceEntity.java" /Users/me/projects/mysources
EX

optparse = OptionParser.new do |opts|
  opts.banner = "USAGE\n jaxrsdoc [options] project_sources_location"
  opts.separator "\nOPTIONS\n"
  
  options[:pattern] = "*Resource.java"
  opts.on( '-p', '--pattern PATTERN', 'Pattern of the Jaxrs annotated files java resources. Default is: "*Resource.java"' ) do |pattern|
    options[:pattern] = pattern
  end

  opts.on( '-m', '--maven', 'Specify a maven project. Project name & version will be derived from the pom.xml found at the directory level' ) do |maven|
    options[:maven] = true
  end

  opts.on('-a', '--project-name NAME', 'Custom name of the project to be included on the website banner' ) do |project_name|
    options[:project_name] = project_name
  end

  opts.on('-r', '--project-version VERSION', 'Custom version of the project to be included on the website banner' ) do |project_version|
    options[:project_version] = project_version
  end

  opts.on('-v', '--version', 'Current version of Jaxrsdoc executable' ) do
    puts "Jaxrsdoc version: #{JaxrsDoc::VERSION}"
    exit
  end
  
  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    puts usage_examples
    exit
  end
  
  opts.separator "\nEXAMPLES"
  
end

begin
  optparse.parse!
rescue OptionParser::InvalidOption, OptionParser::InvalidArgument, OptionParser::MissingArgument
  puts "#{$!.message}"
  puts "try 'jaxrsdoc -h' for more information"
  exit
end

resources_location = ARGV.first

puts "Looking files recursively at #{resources_location}"
matched_files = Dir.glob("#{resources_location}/**/#{options[:pattern]}").select{ |entry| File.file?(entry) }
puts "Found #{matched_files.size} files matching '#{options[:pattern]}'"

processed_resources = matched_files.map {|file| 
  JaxrsDoc::ResourceParser.parse(File.new(file))
}.select {|resource| resource.valid? and not resource.nil? }
puts "Processed #{processed_resources.size} files with a @Path type annotation"

project_version = options[:project_version]
project_name = options[:project_name]

if(options[:maven]) then
  puts "Looking for a pom.xml file at #{resources_location}"
  pom_xml = Dir.glob("#{resources_location}/pom.xml").first
  if(pom_xml) then
    pom = REXML::Document.new File.new(pom_xml)
    project_name = pom.elements["//artifactId"].first 
    project_version = pom.elements["//version"].first
    puts "Found maven project with name: #{project_name}, version: #{project_version}"
  else
    puts "--> ERROR: Cannot find any pom.xml file at #{resources_location}"
  end
end

project_version = options[:project_version] if(options[:project_version])
project_name = options[:project_name] if(options[:project_name])

output_dir = JaxrsDoc::Site.new(processed_resources, Dir.pwd, {:project_version => project_version, :project_name => project_name}).generate

puts "Site generated. Open #{output_dir.path}/index.html"


